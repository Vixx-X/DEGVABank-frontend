import Layout from '@components/Layout';
import Loader from '@components/common/Loader';
import Button from '@components/common/button/Button';
import CharField from '@components/common/form/CharField';
import PasswordField from '@components/common/form/PasswordField';
import HeaderTitle from '@components/header/HeaderTitle';

import { API_URLS, SERVER_URLS } from '@config';

import { useFetchCallback } from '@hooks/useFetchCallback';
import useSendAlert from '@hooks/useSendAlert';
import useToggle from '@hooks/useToggle';

import Router from 'next/router';
import { FormEvent, useState } from 'react';

const { URL_CHANGE_PASSWORD, URL_OTP_REQUEST } = API_URLS;
const { URL_ACCOUNT } = SERVER_URLS;

interface ChangePasswordFormData {
  old_password: string;
  new_password1: string;
  new_password2: string;
  token: string;
  device: string;
}

const ChangePassword = () => {
  const [formError, setFormError] = useState<ChangePasswordFormData>({
    old_password: '',
    new_password1: '',
    new_password2: '',
    token: '',
    device: '',
  });
  const [form, setForm] = useState<ChangePasswordFormData>({
    old_password: '',
    new_password1: '',
    new_password2: '',
    token: '',
    device: '',
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);
  const [messageError, setMessageError] = useState('');
  const Fetch = useFetchCallback();

  const sendAlert = useSendAlert();
  const handleChange = (e: FormEvent<HTMLInputElement>) => {
    const el = e.target as HTMLInputElement;
    setForm({
      ...form,
      [el.name]: el.value,
    });
  };

  const [openOTP, toggleOTP] = useToggle(false);
  const [expiredTime, setExpiredTime] = useState(null);

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setLoading(true);
    const options = {
      method: 'POST',
      body: JSON.stringify(form),
    };

    try {
      const [dataJson, ok] = await Fetch(URL_CHANGE_PASSWORD, options);
      if (ok) {
        sendAlert(
          'success',
          'Cambio de Contraseña',
          'Se registro correctamente el cambio de contraseña.'
        );
        Router.push(URL_ACCOUNT);
      } else {
        setMessageError(dataJson?.non_field_errors?.join(', '));
        if (!dataJson.token) toggleOTP(false);
        setFormError(dataJson);
        setError(true);
      }
    } catch (error) {
      setError(true);
      setMessageError('Hay un error con la página');
    } finally {
      setLoading(false);
    }
  };

  const handleClick = async (e: any) => {
    e.preventDefault();
    setLoading(true);
    const options = {
      method: 'POST',
      body: JSON.stringify(form),
    };

    try {
      const [dataJson, ok] = await Fetch(URL_OTP_REQUEST, options);
      if (ok) {
        setForm({
          ...form,
          device: dataJson.device,
        });
        const expire = Math.round(new Date(dataJson.expire).getTime() / 1000);
        const i = setInterval(() => {
          const diff = expire - Math.round(Date.now() / 1000);
          if (diff < 0) {
            clearInterval(i);
            setExpiredTime(0);
          } else {
            setExpiredTime(diff);
          }
        }, 1000);

        toggleOTP(true);
      } else {
        setMessageError(dataJson);
        setError(true);
      }
    } catch (error) {
      setError(true);
      setMessageError('Hay un error con la página');
    } finally {
      setLoading(false);
    }
  };

  if (loading) return <Loader />;

  return (
    <Layout title="Cambio tu Correo" description="Cambia tu correo electrónico">
      <section className="my-12 ">
        <div className="container mx-auto animate__animated animate__fadeIn animate__delay-3s">
          {openOTP ? (
            <>
              <HeaderTitle title="Revisa tu Correo" />
              <div className="flex flex-col items-center justify-center mb-20">
                <p>
                  Te mandamos un codigo de confirmación a tu nuevo correo, el
                  cual expira en {expiredTime} segundos.
                </p>
              </div>
            </>
          ) : (
            <HeaderTitle title="Cambia tu Contraseña" />
          )}

          <form method="POST" onSubmit={(e) => handleSubmit(e)}>
            {openOTP ? (
              <div className="flex flex-col items-center justify-center mb-20">
                <CharField
                  placeholder="Token"
                  name="token"
                  onChange={handleChange}
                  value={form.token}
                />
                <span className="text-red-500 text-sm">{formError.token}</span>

                <Button
                  type="submit"
                  className="bg-primary-new rounded-md py-3 text-white font-extrabold w-full lg:w-96 primary"
                >
                  Enviar
                </Button>
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center mb-20">
                <PasswordField
                  placeholder="Antigua contraseña"
                  name="old_password"
                  onChange={handleChange}
                  value={form.old_password}
                />
                <span className="text-red-500 text-sm">
                  {formError.old_password}
                </span>

                <PasswordField
                  placeholder="Contraseña Nueva"
                  name="new_password1"
                  onChange={handleChange}
                  value={form.new_password1}
                />
                <span className="text-red-500 text-sm">
                  {formError.new_password1}
                </span>

                <PasswordField
                  placeholder="Confirmar Nueva Contraseña"
                  name="new_password2"
                  onChange={handleChange}
                  value={form.new_password2}
                />
                <span className="text-red-500 text-sm">
                  {formError.new_password2}
                </span>

                <Button
                  onClick={handleClick}
                  className="bg-primary-new rounded-md py-3 text-white font-extrabold w-full lg:w-96 primary"
                >
                  Cambiar Contraseña
                </Button>

                {error ? (
                  <div className="bg-red-400 border  border-red-700 w-96 p-3 my-3 py-3 rounded-lg text-sm font-normal">
                    <strong>Error: </strong> {JSON.stringify(messageError)}
                  </div>
                ) : null}
              </div>
            )}
          </form>
        </div>
      </section>
    </Layout>
  );
};

export default ChangePassword;

export async function getStaticProps() {
  return {
    props: {
      pageNeedAuth: true,
    },
  };
}
