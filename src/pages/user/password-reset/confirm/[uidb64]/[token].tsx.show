import Layout from '@components/Layout';
import Loader from '@components/common/Loader';
import Button from '@components/common/button/Button';
import PasswordField from '@components/common/form/PasswordField';
import HeaderTitle from '@components/header/HeaderTitle';

import { API_URLS, SERVER_URLS } from '@config';

import { makeUrl } from '@utils/makeUrl';

import Link from 'next/link';
import { FormEvent, useState } from 'react';

const { URL_PASSWORD_RESET_CONFIRM } = API_URLS;
const { URL_PASSWORD_RESET } = SERVER_URLS;

interface PasswordResetConfirmFormData {
  new_password1: string;
  new_password2: string;
}
interface PasswordResetConfirmProps {
  uidb64: string;
  token: string;
  invalid_link: string;
}

const PasswordResetConfirm = ({
  uidb64,
  token,
  invalid_link,
}: PasswordResetConfirmProps) => {
  const [form, setForm] = useState<PasswordResetConfirmFormData>({
    new_password1: '',
    new_password2: '',
  });
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const [successMessage, setSuccessMessage] = useState('');
  const [error, setError] = useState(false);
  const [messageError, setMessageError] = useState('');

  const handleChange = (e: FormEvent<HTMLInputElement>) => {
    const el = e.target as HTMLInputElement;
    setForm({
      ...form,
      [el.name]: el.value,
    });
  };

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setLoading(true);
    try {
      const data = await fetch(
        makeUrl(URL_PASSWORD_RESET_CONFIRM, { uidb64, token }),
        {
          method: 'POST',
          mode: 'cors', // no-cors, *cors, same-origin
          credentials: 'include', // include, *same-origin, omit, include
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(form),
        }
      );
      const dataJson = await data.json();
      if (data.ok) {
        setSuccess(true);
        setSuccessMessage(dataJson.message);
      } else {
        setMessageError(dataJson.non_field_errors.join(','));
        setError(true);
      }
    } catch (error) {
      setError(true);
      setMessageError('Hay un error con la página');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Layout
      title="Resetear Contraseña"
      description="Resetea tu contraseña con una nueva"
    >
      {loading ? (
        <Loader />
      ) : invalid_link ? (
        <section className="my-12 ">
          <div className="container mx-auto animate__animated animate__fadeIn animate__delay-3s">
            <HeaderTitle title="Resetear Contraseña" />
            <div className="flex flex-col items-center justify-center mb-20">
              <p>
                El link ha expirado o es invalido, vuelve a mandar el correo{' '}
                <Link href={URL_PASSWORD_RESET}>
                  <a className="hover:underline">aquí</a>
                </Link>
                .
              </p>
            </div>
          </div>
        </section>
      ) : success ? (
        <section className="my-12 ">
          <div className="container mx-auto animate__animated animate__fadeIn animate__delay-3s">
            <HeaderTitle title="Resetear Contraseña" />
            <div className="flex flex-col items-center justify-center mb-20">
              <p>{successMessage}</p>
            </div>
          </div>
        </section>
      ) : (
        <section className="my-12 ">
          <div className="container mx-auto animate__animated animate__fadeIn animate__delay-3s">
            <HeaderTitle title="Resetear Contraseña" />

            <form method="POST" onSubmit={(e) => handleSubmit(e)}>
              <div className="flex flex-col items-center justify-center mb-20">
                <PasswordField
                  placeholder="Contraseña nueva"
                  name="new_password1"
                  onChange={handleChange}
                  value={form.new_password1}
                />
                <PasswordField
                  placeholder="Confirmar contraseña nueva"
                  name="new_password2"
                  onChange={handleChange}
                  value={form.new_password2}
                />

                <Button type="submit">Enviar</Button>

                {error ? (
                  <div className="bg-red-400 border  border-red-700 w-96 p-3 my-3 py-3 rounded-lg text-sm font-normal">
                    <strong>Error: </strong> {messageError}
                  </div>
                ) : null}
              </div>
            </form>
          </div>
        </section>
      )}
    </Layout>
  );
};

export default PasswordResetConfirm;

export async function getServerSideProps({ params }: any) {
  try {
    const option = {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    };
    const resp = await fetch(
      makeUrl(URL_PASSWORD_RESET_CONFIRM, params),
      option
    );
    const data = await resp.json();
    return {
      props: {
        invalid_link: data?.invalid_link,
        ...params,
      },
    };
  } catch (error) {
    console.log(error);
    return {};
  }
}
